.. WDOM documentation master file, created by
   sphinx-quickstart on Mon Jan 11 18:49:13 2016.
   You can adapt this file completely to your liking, but it should at least
   contain the root `toctree` directive.

WDOM
====

WDOM is a python library to control DOM on browser, as if it is a GUI elements.
This library includes web-server (tornado/aiohttp), but not intended to be
used as a web framework, please use for **Desktop** GUI Applications!

Features
--------

* Implemented in pure python

    * Easy install, easy distribution

* CSS frameworks are available for theming your app
* Interfaces are based on `DOM specification`_, so you don't need to learn about
  special classes/methods

    * Implemented DOM features are listed in `Features
      <https://github.com/miyakogi/wdom/wiki/Features>`_

* Testable with browsers and `Selenium`_ WebDriver
* MIT licence

Requirements
------------

Python 3.5.1+ and any modern-browser are required.
Also supports Electron and PyQt's webkit browser.
IE is not supported, but most of features will work with IE11.

Installation
------------

Install from github by pip::

    pip install git+http://github.com/miyakogi/wdom

As WDOM depends on `tornado`_ web framework, it will be installed automatically.
Optionally supports `aiohttp`_, which is a web framework natively supports
asyncio and is partly written in C. Using aiohttp will result in better
performance. If you want to use WDOM with aiohttp, install it with pip::

    pip install aiohttp

Any configurations are not required; when aiohttp is available, WDOM will use it
automatically.

Basic Usages
------------

First example
^^^^^^^^^^^^^

Program to show ``"Hello, WDOM"`` on browser is:

.. literalinclude:: guide/samples/tut1.py

Save and execute code and access ``http://localhost:8888`` by browser.
Then, web page with ``"Hello, WDOM"`` will be shown.

The four lines beginning from ``document = get_document()`` are very similar to
JavaScript.
``document`` returned by ``get_document()`` is a Document Node, equivalent to
``document`` object in JavaScript on browsers.
``document.createElement('{tag-name}')`` generates new element with the given
tag-name.
``appendChild`` method inserts the child node at last.
Not used in the sample code, by using ``removeChild`` method, one can remove the
child node.

Events
^^^^^^

Reverse Text on Click
~~~~~~~~~~~~~~~~~~~~~

WDOM's event handling is also same as JavaScript:

.. literalinclude:: guide/samples/tut2.py

Run this code and click ``"Hello, WDOM"``.
Then it will be reversed.
When clicked again, it will be reversed again and back to ``"Hello, WDOM"``.

``addEventListener('{event-type}', {handler})`` method registers ``handler`` to
the given ``event-type``.
In the sample code, ``rev_text`` function is registered to ``click`` event.
Values available for event type are same as JavaScript's DOM, for example, it is
listed at `Event reference | MDN
<https://developer.mozilla.org/en-US/docs/Web/Events>`_.

When the ``h1`` element is clicked, registered function ``rev_text`` is called with
a single argument, event, which is an Event object, though it is not used in the
sample code.

User Input Event
~~~~~~~~~~~~~~~~

The below sample shows how to use event object:

.. literalinclude:: guide/samples/tut3.py

In this sample, ``textarea`` element is added.
When user inputs some text on the ``textarea``, it will be shown as ``h1`` element.

In the ``update`` function, ``event.target`` has a reference to the element
which emitted the event, in this case it is a ``textarea`` element.
And, as same as JavaScript, a ``textarea`` element (and ``input`` element) contains
its current value at ``value`` attribute.
In the sample code, setting its value to ``h1`` element's ``textContent``.

Python Classes and Extensions of WDOM
-------------------------------------

Generating new elements by ``document.createElement`` every time is quite mess.
So WDOM's ``wdom.tag`` module provides simple tag classes usually used.
By using the, the above example can be written as:

.. literalinclude:: guide/samples/tut4.py

Instead of using ``document.createElement``, in the above example  using ``H1``
class and ``Input`` class to generate ``h1`` element and input element.
Furthermore, ``MyElement`` class inherits ``Div`` class. Its instance is
rendered as ``div`` element, or ``<div>`` tag, on a browser.
These instances are same as instances generated by ``document.createElement``
method.

Names of pre-defined classes on ``wdom.tag`` module are same as related tag
names, starting with capital-case and followed by lower-case.
For example, ``<button>`` tag is ``Button`` class, ``<br>`` tag is ``Br`` class,
and ``<textarea>`` tag is ``Textarea``.

Actual HTML strings can be obtained by ``html`` property of each elements.
For example, ``print(MyElement().html)`` shows::

    <div rimo_id="..."><input rimo_id="..."><h1 rimo_id="...">Hello, WDOM</h1></div>

``rimo_id`` attribute is used internally.
If you want to omit it for tests, use ``html_noid`` property instead::

    print(MyElement().html_noid)
    # -> <div><input><h1>Hello, WDOM</h1></div>

Append to Parent Node
^^^^^^^^^^^^^^^^^^^^^

By using ``parent`` argument of constructor, newly generated elements will be
automatically appended to the parent node.
Using this, the above example can be written as:

.. literalinclude:: guide/samples/tut5.py

At the ``self.h1 = H1(parent=self)``, new ``h1`` element is automatically appended
to ``self`` as its child node.

Append Child Nodes
^^^^^^^^^^^^^^^^^^

In the other way, child nodes can be appended on generation.

.. literalinclude:: guide/samples/tut6.py

At the ``self.h1 = H1('Hello, WDOM', parent=self)``, the first argument is
converted to Text Node and appended to the newly generated ``h1`` element.
With multiple arguments, more than one child node can be appended, like
``H1(H2(), P(), ...)``.

Initialization with Attributes
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Attributes are also able to be defined with keyword arguments on the
constructor.

.. literalinclude:: guide/samples/tut7.py

``class`` is a python's keyword, so use ``class_`` (trailing underscore) instead.

.. literalinclude:: guide/samples/tut8.py

Default Class Attribute
^^^^^^^^^^^^^^^^^^^^^^^

User defined class can have default class attributes.

.. literalinclude:: guide/samples/tut9.py

``class_`` class-variable is added to the instance.
This attribute cannot be removed at its instance and it is inherited to the
subclasses.

Shortcut of Class Definition
^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Defining lots of similar classes by ``class`` statement is quite mess.
WDOM provides ``wdom.tag.NewTagClass`` function to make new user-defined
classes.

``MyButton`` class and ``DefaultButton`` class defined in the above example can
be defined simply by using ``NewTagClass`` function as below:

.. literalinclude:: guide/samples/tut10.py

The first argument is a name of new class, the second is a tag name, the third
is a base class, and the firth and other keyword arguments are class-variables
of the new class.
To inherit multiple classes, use tuple at the third argument.

These features are not DOM standard and specially defined for WDOM.

Using HTML
----------

Making large applications with ``appendChild`` and ``insertBefore`` are quite
difficult.
So writing HTML and parse it to DOM is sometimes useful.

It can be done by ``innerHTML`` method, as same as JavaScript.
For example, making large list:

.. literalinclude:: guide/samples/tut11.py

``innerHTML`` removes all existing child nodes and insert parsed elements.

Each child nodes can be accessed via ``childNodes`` property, which returns
list-like live-object, but not able to modify its values.
Similar to JavaScript, ``firstChild`` and ``lastChild`` property provides
reference to the first/last child node.

``insertAdjacentHTML({position}, {html})`` also parses HTML and insert new
elements to the ``position``.
This method is also same as JavaScript's one, so for details please see `Element.insertAdjacentHTML() | MDN <https://developer.mozilla.org/en-US/docs/Web/API/Element/insertAdjacentHTML>`_ or `DOM specification`_.

``outerHTML`` is not implemented.

Loading Static Contents
-----------------------

Contents on the Web
^^^^^^^^^^^^^^^^^^^

As an example, use `bootstrap`_.

To use bootstrap, one css file (bootstrap.min.css) and two js files (jquery and
bootstrap.min.js) are need to be loaded.
To load css file, use ``<link>`` tag and insert into the ``<head>``.
And to load js files, use ``<script>`` tag and insert into the ``<body>``.
Both ``<head>`` and ``<body>`` tags can be accessed via ``document.head`` and
``document.body`` (same as JavaScript).

.. literalinclude:: guide/samples/tut12.py

As frequently required to load css and js files on document, WDOM provides
shortcut method; ``document.add_cssfile({/path/to/cssfile})`` and
``document.add_jsfile({/path/to/jsfile})``.

.. literalinclude:: guide/samples/tut13.py

Local Resources
^^^^^^^^^^^^^^^

User's css files and other static contents, like images or html files, are also
available on WDOM app.

For the directory tree like below::

    .
    ├── static
    │   └── css
    │       └── app.css
    ├── app.py
    ├── module1.py
    ├── ...
    ...

When want to use ``static/css/app.css`` from ``app.py``, ``app.py`` will become
as follows:

.. literalinclude:: guide/samples/tut14.py

The first argument of the ``app.add_static_path`` is a prefix to access the
static files and the second argument is a path to the directory to be served.
Files under the assigned directory can be accessed by URL like
``http://localhost:8888/prefix/(dirname/)filename``.
For example, if accessed to ``http://localhost:8888/static/css/app.css`` with a
browser, ``app.css`` will be shown.

It's not necessary to use the same name for the prefix as the directory name to
be registered.
For example, in case to use ``my_static`` as a prefix, change to
``add_static_path('my_static', static_dir)`` and then can be accessed to
``app.css`` from ``http://localhost:8888/my_static/css/app.css``.

Not only css files but also any static files, like js files, html files, or
images are able to be served.

Any names can be used if it is valid for URL, but ``_static`` is already used by
WDOM, so do not use for a prefix.

Newest DOM Features
-------------------

Some new features of DOM, which have not been implemented yet on browsers are
available on WDOM.

ParentNode and ChildNode Interfaces
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

``appendChild`` method add only one child node, but ``append`` method can append
multiple nodes at once.
Furthermore, strings are also available (strings are automatically converted to
Text Node).

.. literalinclude:: guide/samples/tut15.py

Similarly, ``prepend``, ``after``, and ``before`` methods are available.
Furthermore, ``remove``, ``replaceWith``, ``children``, ``firstElementChild``,
and ``lastElementChild`` methods are also available on WDOM.

Internally, these methods update view on the browser at once, so using theme
methods usually result in better performance.

* References

    * `ParentNode | DOM Standard <https://dom.spec.whatwg.org/#interface-parentnode>`_
    * `NonDocumentTypeChildNode | DOM Standard <https://dom.spec.whatwg.org/#nondocumenttypechildnode>`_
    * `ChildNode | DOM Standard <https://dom.spec.whatwg.org/#interface-childnode>`_

Custom Element
^^^^^^^^^^^^^^

WDOM provides limited supports on custom elements.

User Defined Custom Tags
~~~~~~~~~~~~~~~~~~~~~~~~

As an example, define ``MyElement`` as a custom tag (``<my-element>``).

.. literalinclude:: guide/samples/tut16.py

Deference is a class variable ``tag = 'my-element'``.

To register ``MyElement`` class as a custom tag, use
``document.defaultView.customElements.define()`` method.

.. note:: Formarly, ``document.registerElement`` method was used to define custom tags,
    but in the `latest specification
    <http://w3c.github.io/webcomponents/spec/custom/>`_ uses
    ``customElements.define`` method to reagister custom tags.
    WDOM uses same method as the latest specification.

``document.defaultView`` property returns a reference to window object, which is
same as the ``window`` object of JavaScript on browsers.

Now you can use the registered custom tag from
``document.createElement('my-element')`` or ``innerHTML =
'<my-element></my-element>>'.
Both these methods return new instance of ``MyElement``

Extended Custom Tags
~~~~~~~~~~~~~~~~~~~~

WDOM supports to extend existing tags by ``is`` attribute.

For example, to define ``MyButton`` or ``DefaultButton`` as a custom tag:

.. literalinclude:: guide/samples/tut17.py

On the class statements, add class variable ``is_`` and specify the name of the
custom tag.
Class variable ``tag`` is a tag name to be extended, but in the above example,
it is already defined in ``Button`` class.

When registering the custom tag, pass the name (value of ``is_``) at the first
argument to ``customElements.define`` and pass dictionary which contains
``'extends'`` field to specify the tag name to be extended, at the third
argument.

After the registration, an HTML like ``<button is="my-button">`` will be parsed
to an instance of ``MyElement``, and ``<button is="default-button">`` to
``DefaultButton``.

.. caution::
    Register custom tags as early as possible.
    If the instance was generated before registering it, it becomes different
    class.
    When the ``customElements.define`` is called and registerd, WDOM will try to
    update the class of existing instances but ``__init__`` will not be not
    called.

    Additionally, changing ``is`` attribute of the existing instances, likely
    ``element.setAttribute('is', '...')``, do not change its class.

    In future, `Lifecycle callback methods
    <http://www.html5rocks.com/en/tutorials/webcomponents/customelements/#lifecycle>`_
    or silimar features will be implemented, but still it's safer to register
    custom tags before instanciate it.


Contents
--------

.. toctree::
    :titlesonly:

    guide/index
    install
    dom
    server
    test


Indices and tables
==================

* :ref:`genindex`
* :ref:`modindex`
* :ref:`search`

.. _DOM specification: https://dom.spec.whatwg.org/
.. _Selenium: http://selenium-python.readthedocs.org/
.. _tornado: http://www.tornadoweb.org/en/stable/
.. _aiohttp: http://aiohttp.readthedocs.org/en/stable/
.. _bootstrap: http://getbootstrap.com/
